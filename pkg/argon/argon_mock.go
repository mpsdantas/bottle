// Code generated by MockGen. DO NOT EDIT.
// Source: ./argon.go

// Package argon is a generated GoMock package.
package argon

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArgon is a mock of Argon interface.
type MockArgon struct {
	ctrl     *gomock.Controller
	recorder *MockArgonMockRecorder
}

// MockArgonMockRecorder is the mock recorder for MockArgon.
type MockArgonMockRecorder struct {
	mock *MockArgon
}

// NewMockArgon creates a new mock instance.
func NewMockArgon(ctrl *gomock.Controller) *MockArgon {
	mock := &MockArgon{ctrl: ctrl}
	mock.recorder = &MockArgonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgon) EXPECT() *MockArgonMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockArgon) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockArgonMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockArgon)(nil).Hash), password)
}

// Verify mocks base method.
func (m *MockArgon) Verify(password, hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", password, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockArgonMockRecorder) Verify(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockArgon)(nil).Verify), password, hash)
}
